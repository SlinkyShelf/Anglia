--Services
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

local DataTemplate = require(script.PlayerDataTemplate)
local ClientDataModule = game.ReplicatedStorage.ClientData
local DataStore2 = require(script.Parent.DataStore2)
local LoadCharacter = require(game.ReplicatedStorage.LoadCharacter)

DataStore2.Combine(DataTemplate.Key, "Slot1")
DataStore2.Combine(DataTemplate.Key, "Slot2")
DataStore2.Combine(DataTemplate.Key, "Slot3")
DataStore2.Combine(DataTemplate.Key, "PermanentData")

local Loading = game.ReplicatedStorage.Loading
local Events = game.ReplicatedStorage.Events
local DataEvents = Events.Data
local PlayerDataUpdate = DataEvents.DataUpdate
local GetData = DataEvents.GetData
local SetSlot = DataEvents.SetSlot

local PlayerCurrentSlot = {}
local PlayerData = {}
local DataUpdateMethods = {}
local PlayerDataStores = {}
for i, v in pairs(script.DataUpdateMethods:GetChildren()) do
	DataUpdateMethods[v.Name] = require(v)
end

local function Check(Table, Template)
	local Updated = false
	for i, v in pairs(Template) do
		if typeof(Table[i]) == typeof(v) then
			if typeof(v) == "table" then
				if Check(Table[i], v) then
					Updated = true
				end
			end
		else
			Table[i] = Template[i]
			Updated = true
		end
	end
	return Updated
end

local function SaveData(plr)
	local newPlayerData = PlayerData[plr.Name]
	local DataStores = PlayerDataStores[plr.Name]
	DataStores["SlotData"]:Set(newPlayerData["SlotData"])
	DataStores["PermanentData"]:Set(newPlayerData["PermanentData"])
	print("Saved")
	
end

function PlayerData:UpdateData(plr)
	PlayerDataUpdate:FireClient(plr, PlayerData[plr.Name])
	SaveData(plr)
end

Players.PlayerAdded:Connect(function(plr)
	while not PlayerCurrentSlot[plr.Name] do
		wait()
	end
	
	--print(PlayerCurrentSlot[plr.Name])
	
	local SlotDataStore = DataStore2("Slot"..PlayerCurrentSlot[plr.Name], plr)
	local PermanentDataStore = DataStore2("PermanentData", plr)
	
	local SlotData = SlotDataStore:Get(DataTemplate.SaveSlotTemplate)
	local PermanentData = PermanentDataStore:Get(DataTemplate.PermanentData)
		
	Check(SlotData, DataTemplate.SaveSlotTemplate)
	Check(PermanentData, DataTemplate.PermanentData)
	
	PlayerData[plr.Name] = {
		SelectedSlot = PlayerCurrentSlot[plr.Name],
		SlotData = SlotData,
		PermanentData = PermanentData
	}
	
	PlayerDataStores[plr.Name] = {
		SlotData = SlotDataStore,
		PermanentData = PermanentDataStore
	}
	
	if PermanentData.FirstTime then
		PermanentData.FirstTime = false
	end
	
	PermanentData.TimesJoined = PermanentData.TimesJoined+1
	
	SaveData(plr)
	
	Loading.ServerPlayer:WaitForChild(plr.Name).DataGrabbed.Value = true
	
	local Character = plr.Character or plr.CharacterAdded:Connect()
	LoadCharacter.SetUpCharacter(Character)
	LoadCharacter.LoadCharacter(Character, PlayerData[plr.Name].SlotData)
end)

function PlayerData:DataMethod(plr, DataMethod, Arg1, Arg2, Arg3, Arg4)
	DataUpdateMethods[DataMethod].Fire(PlayerData[plr.Name], Arg1, Arg2, Arg3, Arg4)
	PlayerData:UpdateData(plr)
end

GetData.OnServerInvoke = function(plr)
	return PlayerData[plr.Name]
end

SetSlot.OnServerEvent:Connect(function(plr, SlotNumber)
	PlayerCurrentSlot[plr.Name] = SlotNumber
end)

game.ReplicatedStorage.Loading.Server.EventsLoaded.Value = true

return PlayerData
